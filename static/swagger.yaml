swagger: '2.0'
info:
  title: 'eCommerce Project API'
  description: 'API documentation for the eCommerce Project'
  version: '1.0.0'
host: '127.0.0.1:5000'
schemes:
  - 'http'
consumes:
  - 'application/json'
produces:
  - 'application/json'

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: "Login endpoint"
      description: "Endpoint for user authentication"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"

  /customers:
    get:
      tags:
        - Customers
      summary: "Get all Customers"
      description: "Retrieve a list of all customers"
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: 'array'
            items:
              $ref: "#/definitions/Customer"
        '404':
          description: 'Customers not found'
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Customers
      summary: "Create a new customer"
      description: "Endpoint to save a new customer to the database."
      parameters:
        - in: "body"
          name: "body"
          description: "Customer to create"
          required: true
          schema:
            $ref: "#/definitions/CustomerInput"
      responses:
        '201':
          description: 'Customer created successfully'
          schema:
            $ref: "#/definitions/Customer"
        '400':
          description: 'Invalid request data'
          schema:
            $ref: "#/definitions/Error"

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: "Get customer by ID"
      description: "Retrieve a customer by their unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: 'Successful response'
          schema:
            $ref: "#/definitions/Customer"
        '404':
          description: 'Customer not found'
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Customers
      summary: "Update a customer"
      description: "Update a customer by their unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Customer data to update"
          required: true
          schema:
            $ref: "#/definitions/CustomerInput"
      responses:
        '200':
          description: 'Customer updated successfully'
          schema:
            $ref: "#/definitions/Customer"
        '404':
          description: 'Customer not found'
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - Customers
      summary: "Delete customer by ID"
      description: "Delete a customer by their unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: 'Customer deleted successfully'
        '404':
          description: 'Customer not found'
          schema:
            $ref: "#/definitions/Error"

  /products:
    get:
      tags:
        - Products
      summary: 'Get all products'
      description: "Retrieve a list of all products"
      responses:
        '200':
          description: 'Successful response'
          schema:
            type: 'array'
            items:
              $ref: "#/definitions/Product"
        '404':
          description: 'No products found'
          schema:
            $ref: "#/definitions/Error"

    post:
      tags:
        - Products
      summary: "Create a new product"
      description: "Endpoint to create a new product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product to create"
          required: true
          schema:
            $ref: "#/definitions/ProductInput"
      responses:
        '201':
          description: 'Product created successfully'
          schema:
            $ref: "#/definitions/Product"
        '400':
          description: 'Invalid request data'
          schema:
            $ref: "#/definitions/Error"

  /products/{id}:
    get:
      tags:
        - Products
      summary: "Get product by ID"
      description: "Retrieve a product by its unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: 'Successful response'
          schema:
            $ref: "#/definitions/Product"
        '404':
          description: 'Product not found'
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Products
      summary: "Update product by ID"
      description: "Update a product by its unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Product data to update"
          required: true
          schema:
            $ref: "#/definitions/ProductInput"
      responses:
        '200':
          description: 'Product updated successfully'
        '404':
          description: 'Product not found'
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - Products
      summary: "Delete product by ID"
      description: "Delete a product by its unique ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        '200':
          description: 'Product deleted successfully'
        '404':
          description: 'Product not found'
          schema:
            $ref: "#/definitions/Error"

definitions:
  LoginCredentials:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Username"
      password:
        type: "string"
        format: "password"
        description: "Password"
    required:
      - "username"
      - "password"

  LoginResponse:
    type: "object"
    properties:
      auth_token:
        type: "string"
        description: "Authentication token"
      message:
        type: "string"
        description: "Message indicating success or failure"

  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"

  CustomerInput:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    required:
      - "name"
      - "email"
      - "phone"

  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      price:
        type: "number"

  ProductInput:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
    required:
      - "name"
      - "price"

  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      customer_id:
        type: "integer"
        format: "int64"
      products:
        type: "array"
        items:
          type: "integer"
      quantity:
        type: "integer"
        format: "int64"

  Error:
    type: "object"
    properties:
      status:
        type: "string"
      message:
        type: "string"
